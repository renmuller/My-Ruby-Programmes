#class syntax

    class NewClass		#className
      # Class magic here
    end

#class Name should begin with a capital!

class Car
  def initialize(make, model) 	#define + instance(2 parameters)
    @make = make		#instance variable1
    @model = model		#instance variable2
  end				#end of def
end				#end of class
 
kitt = Car.new("Pontiac", "Trans Am") #kitt =instance



#def initialize(name) @name = name end


#Instanciating your objects

class Person
  def initialize(name)
  @name = name
  end
end

matz = Person.new("Yukihiro")

# This is a: 	$global varable
		@instance variable
		@@class variable

#class Computer
  $manufacturer = "Mango Computer, Inc."
  @@files = {hello: "Hello, world!"}
  
  def initialize(username, password)
    @username = username
    @password = password
  end
  
  def current_user
    @username
  end
  
  def self.display_files
    @@files
  end
end

# Make a new Computer instance:
hal = Computer.new("Dave", 12345)

puts "Current user: #{hal.current_user}"
# @username belongs to the hal instance.

puts "Manufacturer: #{$manufacturer}"
# $manufacturer is global! We can get it directly.

puts "Files: #{Computer.display_files}"
# @@files belongs to the Computer class.


class MyClass
  $my_variable = "Hello!"  #The '$' makes it reachable
end				#from outide the class

puts $my_variable


#code to count the number of instances in a class
class Person
  # Set your class variable to 0 on line 3
  @@people_count = 0
    def initialize(name)
    @name = name
    # Increment your class variable on line 8
    @@people_count += 1
  end
    def self.number_of_instances
    # Return your class variable on line 13
    return @@people_count
  end
end
matz = Person.new("Yukihiro")
dhh = Person.new("David")
puts "Number of Person instances: #{Person.number_of_instances}"


#Real-world commercial example
def create_record(attributes, raise_error = false)
  record = build_record(attributes)
  yield(record) if block_given?
  saved = record.save
  set_new_record(record)
  raise RecordInvalid.new(record) if !saved && raise_error
  record
end


#Example of class inheritance

class ApplicationError
  def display_error
    puts "Error! Error!"
  end
end

class SuperBadError < ApplicationError	#right here!
end

err = SuperBadError.new
err.display_error


#Adding class MyApp which inherits from the Application class
class Application
  def initialize(name)
    @name = name
  end
end

# Add your code below!
class MyApp < Application
end


#More derived class/subclass examples

class Creature
  def initialize(name)
    @name = name
  end
  
  def fight
    return "Punch to the chops!"
  end
end

class Dragon < Creature
  def fight
    return "Breathes fire!"
  end
end		#ALWAYS remember that 2nd 'end'!!!


#base class AKA parent class AKA superclass = same thing!


#Basic syntax example of calling a parent class that
#you've accidentally overridden

class DerivedClass < Base
  def some_method
    super(optional args)
      # Some stuff
    end
  end
end 		#Remember those 'ends'!


#How to use the 'super' to regain parent function

class Creature
  def initialize(name)
    @name = name
  end
  
  def fight
    return "Punch to the chops!"
  end
end

class Dragon < Creature
  def fight
    puts "Instead of breathing fire..."   #I added this line in
    super   	#I removed the: return "Breathes fire!" bit.
  end
end


#My code: message class, initialize method,
#takes 2x parameters, both set to instance variables,
#and finally - the appropriate number of 'ends'.

class Message
  def initialize(from,to)
    @from = from
    @to = to
  end
end


#My code: inheritance

class Message
  @@messages_sent = 0

  def initialize(from,to)
    @from = from
    @to = to
    @@messages_sent += 1
  end

end

my_message = Message.new("Karen","David")

class Email < Message
  def initialize(subject)
  @subject = subject
  end
end


#My code: Adding super to revert to parent instance method

class Message
  @@messages_sent = 0

  def initialize(from,to)
    @from = from
    @to = to
    @@messages_sent += 1
  end

end

my_message = Message.new("Karen","David")

class Email < Message
  def initialize(from,to)
  super
  end
end

---------------------------------------------------------
#Virtual Machine

#My code: basic initialize method

class Computer
  def initialize(username,password)
  @username = username
  @password = password
  @files = {}
  end
end

#My code: so far...
class Computer
  @@users = {}
  def initialize(username, password)
    @username = username
    @password = password
    @files = {}
    @@users[username] = password
  end
  
  def create(filename)
    time = Time.now
    @files [filename] = time
    puts "A new file '#{filename}' has been created by #{@username} at #{time}"
  end
end

#A class method is prefixed with the class name:
class Machine
  def Machine.hello
    puts "Hello from the machine!"
  end
end


#Virtual Machine - final
class Computer
    @@users = {}
    def initialize(username, password)
        @username = username
        @password = password
        @@users[username] = password
        @files = {}
    end
    
    def create(filename)
        @time = Time.now
        @files[filename] = @time
        puts "The file {@files[filename]} was created at {@time}"
    end
    
    def Computer.get_users
        return @@users
    end
end

my_computer = Computer.new("Xedo", 0123)

----------------------------------------------------
----------------------------------------------------
#OOP2

class Dog

  def initialize(name, breed)
    @name = name
    @breed = breed
  end

  public
  def bark
    puts "Woof!"
  end

  private
  def id
    @id_number = 12345
  end
end



#attr_reader, attr_writer

class Person

    attr_reader :name
    attr_reader :job
    attr_writer :job

  def initialize(name, job)
    @name = name
    @job = job
  end
end


#attr_accessor (reads AND writes)

class Person
  attr_reader :name
  attr_accessor :job
  
  def initialize(name, job)
    @name = name
    @job = job
  end
end


#example module

module Circle

  PI = 3.141592653589793
  
  def Circle.area(radius)
    PI * radius**2
  end
  
  def Circle.circumference(radius)
    2 * PI * radius
  end
end


=begin
class names & module names are written in 
CapitalizedCamelCase, rather than 
lowercase_with_underscores.
=end

=begin
Ruby constants are written in ALL_CAPS and are 
separated with underscores if there’s more than 
one word
=end


# This-  :: is called the scope resolution operator!

#Basic example to use scope resolution operator

puts Math::PI 	#takes PI from Math module, not Circle


#How to explicitly bring in a module:

require 'date'
puts Date.today


#Any class that includes a certain module can use 
#those module’s methods

class Angle
  include Math
  attr_accessor :radians
  
  def initialize(radians)
    @radians = radians
  end
  
  def cosine
    cos(@radians)
  end
end

acute = Angle.new(1)
acute.cosine


=begin
#When a module is used to mix additional behavior and
#information into a class, it’s called a mixin. 
Mixins allow us to customize a class without 
having to rewrite code.
=end

#example module
module Action
  def jump
    @distance = rand(4) + 2
    puts "I jumped forward #{@distance} feet!"
  end
end

class Rabbit
  include Action
  attr_reader :name
  def initialize(name)
    @name = name
  end
end

class Cricket
  include Action
  attr_reader :name
  def initialize(name)
    @name = name
  end
end

peter = Rabbit.new("Peter")
jiminy = Cricket.new("Jiminy")

peter.jump
jiminy.jump


#Imitating inheriting classes

# Create your module here!
module MartialArts
puts "I'm a swordsman"

class Ninja
include MartialArts
  def initialize(clan)
    @clan = clan
  end
end

class Samurai
include MartialArts
  def initialize(shogun)
    @shogun = shogun
  end
end


#public method

class Application
  attr_accessor :status
  def initialize; end
  # Add your method here!
  public
    def print_status
    puts "All systems go!"
  end
end


#A class App

class Application
  attr_accessor :status
  def initialize; end
  # Add your method here!
  public
    def print_status
    puts "All systems go!"
  end

  private
    def password
    return 12345
  end
  
end


#Basic module code and syntax

module Languages
  FAVE = "Ruby"
end


#using a Mixin

module Languages
  FAVE = "Ruby"  # This is what you typed before, right? :D
end

class Master
include Languages	#Here's the part I added!
  def initialize; end
  def victory
    puts FAVE
  end
end

total = Master.new
total.victory


# optional parameters

    def initialize(name, balance=100)
      @name = name
      @balance = balance


#Creating the acount class

class Account
  attr_reader :name
  attr_reader :balance
  def initialize(name, balance=100)
    @name = name
    @balance = balance
  end
end


#Building an Account object with public methods to 
#display balances and transfer funds, but which rely 
#on private methods to make sure the user's PIN is 
#correct before approving transactions.

class Account
  attr_reader :name
  attr_reader :balance
  def initialize(name, balance=100)
    @name = name
    @balance = balance
  end
  private
    def pin
      @pin = 1234
    end
    def pin_error 
      return "Access denied: incorrect PIN."
    end
end


#Bank app

class Account
  attr_reader :name
  attr_reader :balance
  def initialize(name, balance=100)
    @name = name
    @balance = balance
  end
  
  public
  def display_balance(pin_number)
    if pin_number == @pin
      puts "Balance: $#{@balance}."
    else
      puts pin_error
    end
  end

  private
  def pin
    @pin = 1234
  end
  def pin_error
    return "Access denied: incorrect PIN."
  end 
end


#withdrawing from bank app

class Account
  attr_reader :name
  attr_reader :balance
  def initialize(name, balance=100)
    @name = name
    @balance = balance
  end
  
  public
  def display_balance(pin_number)
    if pin_number == @pin
      puts "Balance: $#{@balance}."
    else
      puts pin_error
    end
  end
  
  def withdraw(pin_number,amount)
    if pin_number == @pin
      @balance -= amount
      puts "Withdrew #{amount}."
    else
      puts pin_error
    end
  end

  private
  def pin
    @pin = 1234
  end
  def pin_error
    return "Access denied: incorrect PIN."
  end 
end


#Final thing!

class Account
  attr_reader :name
  attr_reader :balance
  def initialize(name, balance=100)
    @name = name
    @balance = balance
  end
  
  public
  def display_balance(pin_number)
    if pin_number == @pin
      puts "Balance: $#{@balance}."
    else
      puts pin_error
    end
  end
  
  def withdraw(pin_number,amount)
    if pin_number == @pin
      @balance -= amount
      puts "Withdrew #{amount}."
    else
      puts pin_error
    end
  end

  private
  def pin
    @pin = 1234
  end
  def pin_error
    return "Access denied: incorrect PIN."
  end 
end

checking_account = Account.new("Eric", 1_000_000)