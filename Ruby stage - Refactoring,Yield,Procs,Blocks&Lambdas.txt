#The Refactor Factory...

#Basic Blocks

5.times do puts "I'm a block!"
end


#double fibs

fibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

# Add your code below!

double = Proc.new {|x| x * 2}

doubled_fibs = fibs.collect(&double)

puts doubled_fibs



#yielding

def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end

yield_name("Eric") { |n| puts "My name is #{n}." }
yield_name("Kay") { |n| puts "My name is #{n}"
}


#My Code - yielding

def double(name)
  puts "step 1 is printed."
  yield ("Karen")
  puts "step 2 is printed."
  yield (name)
  puts "step 3 completes the block. Back to method"
end
double("Ruby Developer") { |n| puts "My name is #{n}."}


#procs

[1, 2, 3].collect!(&cube)
# ==> [1, 8, 27]
[4, 5, 6].map!(&cube)
# ==> [64, 125, 216]


#more procs
# Here at the amusement park, you have to be four feet tall
# or taller to ride the roller coaster. Let's use .select on
# each group to get only the ones four feet tall or taller.

group_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]
group_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]
group_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]

# Complete this as a new Proc
over_4_feet = Proc.new { |height| height >= 4 }

# Change these three so that they use your new over_4_feet Proc
can_ride_1 = group_1.select(&over_4_feet)
can_ride_2 = group_2.select(&over_4_feet)
can_ride_3 = group_3.select(&over_4_feet)

puts can_ride_1
puts can_ride_2
puts can_ride_3


#Basic Proc using .call

hi = Proc.new {puts "Hello!"}
hi.call


#convert proc to symbol to turn strings into integer 

strings = ["1", "2", "3"]
nums = strings.map(&:to_i)


#My code: converting and array of integers to strings

numbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
strings_array = numbers_array.map(&:to_s)
puts strings_array


#lambda

def lambda_demo(a_lambda)
  puts "I'm the method!"
  a_lambda.call
end

lambda_demo(lambda { puts "I'm the lambda!" })


#lambda code: converting array of strings to symbols

strings = ["leonardo", "donatello", "raphael", "michaelangelo"]

symbolize = lambda{ |x| x.to_sym }
# Write your code above this line!
symbols = strings.collect(&symbolize)
print symbols


#Batman vs Ironman

def batman_ironman_proc
  victor = Proc.new { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end

puts batman_ironman_proc

def batman_ironman_lambda
  victor = lambda { return "Batman will win!" }
  victor.call
  "Iron Man will wim!"
end

puts batman_ironman_lambda


#The word Symbol has to be capitalized when youâ€™re 
# doing an .is_a? check!

:hello.is_a? Symbol
# ==> true


#
my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]

# Add your code below!
symbol_filter = lambda {|x| x.is_a? Symbol}
symbols = my_array.select(&symbol_filter)

my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]

puts symbols


#My code: selecting only the integers from a mixed array.

odds_n_ends = [true,"Cornflakes",3.5,"Rambo",6,58,"Cats",false,10,"Ruby"]
ints = odds_n_ends.select { |ints| ints.is_a? Integer}
puts ints


#My code: selecting only ages below 100 in an array.

ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]
under_100 = Proc.new { |n| n<100}
youngsters = ages.select(&under_100)
puts youngsters

#lambda - selecting all crew names A-M

crew = {
  captain: "Picard",
  first_officer: "Riker",
  lt_cdr: "Data",
  lt: "Worf",			#change!
  ensign: "Ro",
  counselor: "Troi",
  chief_engineer: "LaForge",
  doctor: "Crusher"
}

first_half = lambda { |key,value| value<"M"}
a_to_m = crew.select(&first_half)
puts a_to_m